# Generated by Django 2.2.3 on 2019-07-13 01:52

import bitfield.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import encrypted_model_fields.fields
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('devices', '0001_initial'),
        ('groupapp', '0001_initial'),
        ('gateways', '0001_initial'),
        ('services', '0001_initial'),
        ('profiles', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('baseaccount_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='profiles.BaseAccount')),
                ('balance', models.FloatField(default=0.0)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, default=None, verbose_name='Ip address')),
                ('description', models.TextField(blank=True, null=True, default=None, verbose_name='Comment')),
                ('house', models.CharField(blank=True, max_length=12, null=True, default=None, verbose_name='House')),
                ('is_dynamic_ip', models.BooleanField(default=False, verbose_name='Is dynamic ip')),
                ('auto_renewal_service', models.BooleanField(default=False, verbose_name='Automatically connect next service')),
                ('markers', bitfield.models.BitField((('icon_donkey', 'Donkey'), ('icon_fire', 'Fire'), ('icon_ok', 'Ok'), ('icon_king', 'King'), ('icon_tv', 'TV'), ('icon_smile', 'Smile'), ('icon_dollar', 'Dollar'), ('icon_service', 'Service'), ('icon_mrk', 'Marker')), default=0)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'customers',
                'ordering': ('fio',),
                'permissions': (('can_buy_service', 'Buy service perm'), ('can_add_balance', 'fill account'), ('can_ping', 'Can ping')),
            },
            bases=('profiles.baseaccount',),
        ),
        migrations.CreateModel(
            name='PeriodicPayForId',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_pay', models.DateTimeField(blank=True, null=True, default=None, verbose_name='Last pay time')),
                ('next_pay', models.DateTimeField(verbose_name='Next time to pay')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customers.Customer', verbose_name='Account')),
                ('periodic_pay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.PeriodicPay', verbose_name='Periodic pay')),
            ],
            options={
                'db_table': 'periodic_pay_for_id',
                'ordering': ('last_pay',),
            },
        ),
        migrations.CreateModel(
            name='PassportInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series', models.CharField(max_length=4, validators=[django.core.validators.RegexValidator(re.compile('^-?\\d+\\Z'), code='invalid', message='Enter a valid integer.')], verbose_name='Passport serial')),
                ('number', models.CharField(max_length=6, validators=[django.core.validators.RegexValidator(re.compile('^-?\\d+\\Z'), code='invalid', message='Enter a valid integer.')], verbose_name='Passport number')),
                ('distributor', models.CharField(max_length=64, verbose_name='Distributor')),
                ('date_of_acceptance', models.DateField(verbose_name='Date of acceptance')),
                ('customer', models.OneToOneField(blank=True, null=True, default=None, on_delete=django.db.models.deletion.CASCADE, to='customers.Customer')),
            ],
            options={
                'verbose_name': 'Passport Info',
                'verbose_name_plural': 'Passport Info',
                'db_table': 'passport_info',
                'ordering': ('series',),
            },
        ),
        migrations.CreateModel(
            name='InvoiceForPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(default=False)),
                ('cost', models.FloatField(default=0.0)),
                ('comment', models.CharField(max_length=128)),
                ('date_create', models.DateTimeField(auto_now_add=True)),
                ('date_pay', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, default=None, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customers.Customer')),
            ],
            options={
                'verbose_name': 'Debt',
                'verbose_name_plural': 'Debts',
                'db_table': 'customer_inv_pay',
                'ordering': ('date_create',),
            },
        ),
        migrations.CreateModel(
            name='CustomerStreet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='groupapp.Group')),
            ],
            options={
                'verbose_name': 'Street',
                'verbose_name_plural': 'Streets',
                'db_table': 'customer_street',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='CustomerService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, default=None, null=True)),
                ('deadline', models.DateTimeField(blank=True, default=None, null=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='link_to_service', to='services.Service')),
            ],
            options={
                'verbose_name': 'Customer service',
                'verbose_name_plural': 'Customer services',
                'db_table': 'customer_service',
                'ordering': ('start_time',),
                'permissions': (('can_complete_service', 'finish service perm'),),
            },
        ),
        migrations.CreateModel(
            name='CustomerRawPassword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passw_text', encrypted_model_fields.fields.EncryptedCharField()),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='customers.Customer')),
            ],
            options={
                'db_table': 'customer_raw_password',
            },
        ),
        migrations.CreateModel(
            name='CustomerLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.FloatField(default=0.0)),
                ('comment', models.CharField(max_length=128)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='profiles.BaseAccount')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customers.Customer')),
            ],
            options={
                'db_table': 'customer_log',
                'ordering': ('-date',),
            },
        ),
        migrations.AddField(
            model_name='customer',
            name='current_service',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='customers.CustomerService'),
        ),
        migrations.AddField(
            model_name='customer',
            name='dev_port',
            field=models.ForeignKey(blank=True, null=True, default=None, on_delete=django.db.models.deletion.SET_NULL, to='devices.Port'),
        ),
        migrations.AddField(
            model_name='customer',
            name='device',
            field=models.ForeignKey(blank=True, null=True, default=None, on_delete=django.db.models.deletion.SET_NULL, to='devices.Device'),
        ),
        migrations.AddField(
            model_name='customer',
            name='gateway',
            field=models.ForeignKey(blank=True, default=None, help_text='Network access server', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gateways.Gateway', verbose_name='Gateway'),
        ),
        migrations.AddField(
            model_name='customer',
            name='group',
            field=models.ForeignKey(blank=True, null=True, default=None, on_delete=django.db.models.deletion.SET_NULL, to='groupapp.Group', verbose_name='Customer group'),
        ),
        migrations.AddField(
            model_name='customer',
            name='last_connected_service',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.Service', verbose_name='Last connected service'),
        ),
        migrations.AddField(
            model_name='customer',
            name='street',
            field=models.ForeignKey(blank=True, null=True, default=None, on_delete=django.db.models.deletion.SET_NULL, to='customers.CustomerStreet', verbose_name='Street'),
        ),
        migrations.CreateModel(
            name='AdditionalTelephone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telephone', models.CharField(max_length=16, validators=[django.core.validators.RegexValidator('^(\\+[7893]\\d{10,11})?$')], verbose_name='Telephone')),
                ('owner_name', models.CharField(max_length=127)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_telephones', to='customers.Customer')),
            ],
            options={
                'verbose_name': 'Additional telephone',
                'verbose_name_plural': 'Additional telephones',
                'db_table': 'additional_telephones',
                'ordering': ('owner_name',),
            },
        ),
        migrations.AlterUniqueTogether(
            name='customer',
            unique_together={('ip_address', 'gateway')},
        ),
    ]
