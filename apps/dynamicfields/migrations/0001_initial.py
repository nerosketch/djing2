# Generated by Django 2.2.5 on 2019-09-29 19:16
import os
from django.db import migrations, models
import django.db.models.deletion
import dynamicfields.models


def _read_sql(fname: str) -> str:
    with open(fname, 'r') as f:
        r = f.read()
    return r


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customers', '0001_initial'),
        ('groupapp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FieldModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=80, verbose_name='Title')),
                ('field_type', models.PositiveSmallIntegerField(choices=[(0, 'Char Field'), (1, 'Integer Field'), (2, 'Email Field'), (3, 'Ip Field'), (4, 'Float Field'), (5, 'Slug Field')], default=0, verbose_name='Field type')),
                ('groups', models.ManyToManyField(db_table='dynamic_fields_groups', related_name='fields', to='groupapp.Group', verbose_name='Groups')),
            ],
            options={
                'db_table': 'dynamic_fields',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='FieldContentModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', dynamicfields.models._DynamicField(blank=True, max_length=127, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customers.Customer')),
                ('field_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='field_contents', to='dynamicfields.FieldModel')),
            ],
            options={
                'db_table': 'dynamic_field_content',
                'unique_together': {('customer', 'field_type')},
            },
        ),
        migrations.RunSQL(_read_sql('%s/pg.sql' % os.path.dirname(os.path.abspath(__file__))))
    ]
